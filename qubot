#!/usr/bin/env python

import re
from twisted.internet import reactor
from twisted.words.protocols.jabber import client, jid, xmlstream
from twisted.words.xish import domish

def rawDataIn(data):
  print 'RECV: ' + data

def rawDataOut(data):
  print 'SEND: ' + data

class Qubot:
  def initFailed(self, failure):
    self.xmlstream.sendFooter()

  def message(self, element):
    if element['from'].startswith(unicode(jid)) and element.body:
      message = domish.Element((None, 'message'))
      message['to'] = 'qubit@conference.jabber.org'
      message['type'] = 'groupchat'
      message.addElement('body', content=str(element.body))
      self.xmlstream.send(message)

    if 'qubit@conference.jabber.org/qubot' != element['from'] and element.body and re.search('qubot', str(element.body), re.I):
      message = domish.Element((None, 'message'))
      message['to'] = 'qubit@conference.jabber.org'
      message['type'] = 'groupchat'
      message.addElement('body', content='don\'t taunt qubot')
      self.xmlstream.send(message)

  def authd(self, xmlstream):
    self.xmlstream = xmlstream

    # Send initial presence
    # http://xmpp.org/internet-drafts/draft-saintandre-rfc3921bis-07.html#presence-initial
    presence = domish.Element((None, 'presence'))
    self.xmlstream.send(presence)

    self.xmlstream.addObserver('/message', self.message)

    presence = domish.Element((None, 'presence'))
    presence['to'] = 'qubit@conference.jabber.org/qubot'
    self.xmlstream.send(presence)

  def connected(self, xmlstream):
    self.xmlstream = xmlstream

    self.xmlstream.rawDataInFn = rawDataIn
    self.xmlstream.rawDataOutFn = rawDataOut

  def end(self, xmlstream):
    self.xmlstream = xmlstream

    reactor.stop()

qubot = Qubot()

jid = jid.JID('administrator@example.com')
password = 'example'

factory = client.XMPPClientFactory(jid, password)
factory.addBootstrap(xmlstream.INIT_FAILED_EVENT, qubot.initFailed)
factory.addBootstrap(xmlstream.STREAM_AUTHD_EVENT, qubot.authd)
factory.addBootstrap(xmlstream.STREAM_CONNECTED_EVENT, qubot.connected)
factory.addBootstrap(xmlstream.STREAM_END_EVENT, qubot.end)

reactor.connectTCP('talk.google.com', 5222, factory)
reactor.run()
